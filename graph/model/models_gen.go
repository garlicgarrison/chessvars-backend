// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MutationResponse interface {
	IsMutationResponse()
}

type BasicMutationResponse struct {
	Code    int    `json:"code"`
	Success bool   `json:"success"`
	Message string `json:"message"`
}

func (BasicMutationResponse) IsMutationResponse() {}

type Pagination struct {
	Cursor *string `json:"cursor"`
	Limit  *int    `json:"limit"`
}

type Thumbnail struct {
	Size *int    `json:"size"`
	URL  *string `json:"url"`
}

type User struct {
	ID          string       `json:"id"`
	Exists      *bool        `json:"exists"`
	Username    *string      `json:"username"`
	Bio         *string      `json:"bio"`
	Preferences []Preference `json:"preferences"`
}

type UserEditInput struct {
	Username    *string      `json:"username"`
	Bio         *string      `json:"bio"`
	Gender      *Gender      `json:"gender"`
	Preferences []Preference `json:"preferences"`
}

type UserMutationResponse struct {
	Code    int    `json:"code"`
	Success bool   `json:"success"`
	Message string `json:"message"`
	User    *User  `json:"user"`
}

func (UserMutationResponse) IsMutationResponse() {}

type Users struct {
	Users []*User `json:"users"`
	Next  *string `json:"next"`
}

type Video struct {
	ID          string       `json:"id"`
	Owner       *User        `json:"owner"`
	URL         *string      `json:"url"`
	Tags        []string     `json:"tags"`
	Thumbnails  []*Thumbnail `json:"thumbnails"`
	Description *string      `json:"description"`
	NumLikes    *int         `json:"numLikes"`
	NumComments *int         `json:"numComments"`
}

type VideoEditInput struct {
	Description *string `json:"description"`
}

type VideoMutationResponse struct {
	Code    int    `json:"code"`
	Success bool   `json:"success"`
	Message string `json:"message"`
	User    *Video `json:"user"`
}

func (VideoMutationResponse) IsMutationResponse() {}

type Videos struct {
	Videos []*Videos `json:"videos"`
	Next   *string   `json:"next"`
}

type Gender string

const (
	GenderMale      Gender = "MALE"
	GenderFemale    Gender = "FEMALE"
	GenderNonbinary Gender = "NONBINARY"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderNonbinary,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderNonbinary:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Preference string

const (
	PreferenceStraight Preference = "STRAIGHT"
	PreferenceGay      Preference = "GAY"
	PreferenceTrans    Preference = "TRANS"
)

var AllPreference = []Preference{
	PreferenceStraight,
	PreferenceGay,
	PreferenceTrans,
}

func (e Preference) IsValid() bool {
	switch e {
	case PreferenceStraight, PreferenceGay, PreferenceTrans:
		return true
	}
	return false
}

func (e Preference) String() string {
	return string(e)
}

func (e *Preference) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Preference(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Preference", str)
	}
	return nil
}

func (e Preference) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
