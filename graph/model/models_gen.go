// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/garlicgarrison/chessvars-backend/graph/resolver"
)

type MutationResponse interface {
	IsMutationResponse()
	GetCode() int
	GetSuccess() bool
	GetMessage() string
}

type BasicMutationResponse struct {
	Code    int    `json:"code"`
	Success bool   `json:"success"`
	Message string `json:"message"`
}

func (BasicMutationResponse) IsMutationResponse()     {}
func (this BasicMutationResponse) GetCode() int       { return this.Code }
func (this BasicMutationResponse) GetSuccess() bool   { return this.Success }
func (this BasicMutationResponse) GetMessage() string { return this.Message }

type GameMutationResponse struct {
	Code    int            `json:"code"`
	Success bool           `json:"success"`
	Message string         `json:"message"`
	Game    *resolver.Game `json:"game"`
}

func (GameMutationResponse) IsMutationResponse()     {}
func (this GameMutationResponse) GetCode() int       { return this.Code }
func (this GameMutationResponse) GetSuccess() bool   { return this.Success }
func (this GameMutationResponse) GetMessage() string { return this.Message }

type Pagination struct {
	Cursor *string `json:"cursor"`
	Limit  *int    `json:"limit"`
}

type UserEditInput struct {
	Username *string `json:"username"`
	Bio      *string `json:"bio"`
}

type UserMutationResponse struct {
	Code    int            `json:"code"`
	Success bool           `json:"success"`
	Message string         `json:"message"`
	User    *resolver.User `json:"user"`
}

func (UserMutationResponse) IsMutationResponse()     {}
func (this UserMutationResponse) GetCode() int       { return this.Code }
func (this UserMutationResponse) GetSuccess() bool   { return this.Success }
func (this UserMutationResponse) GetMessage() string { return this.Message }

type Users struct {
	Users []*resolver.User `json:"users"`
	Next  *string          `json:"next"`
}

type GameStatus string

const (
	GameStatusIngame GameStatus = "INGAME"
	GameStatusWin    GameStatus = "WIN"
	GameStatusLoss   GameStatus = "LOSS"
	GameStatusDraw   GameStatus = "DRAW"
)

var AllGameStatus = []GameStatus{
	GameStatusIngame,
	GameStatusWin,
	GameStatusLoss,
	GameStatusDraw,
}

func (e GameStatus) IsValid() bool {
	switch e {
	case GameStatusIngame, GameStatusWin, GameStatusLoss, GameStatusDraw:
		return true
	}
	return false
}

func (e GameStatus) String() string {
	return string(e)
}

func (e *GameStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameStatus", str)
	}
	return nil
}

func (e GameStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GameType string

const (
	GameTypeJanggi GameType = "JANGGI"
	GameTypeShogi  GameType = "SHOGI"
)

var AllGameType = []GameType{
	GameTypeJanggi,
	GameTypeShogi,
}

func (e GameType) IsValid() bool {
	switch e {
	case GameTypeJanggi, GameTypeShogi:
		return true
	}
	return false
}

func (e GameType) String() string {
	return string(e)
}

func (e *GameType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameType", str)
	}
	return nil
}

func (e GameType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
